process $ /usr/bin/docker 'run'
'-v'
'/root/arfex:/root/arfex'
'-v'
'/tmp:/tmp'
'-w'
'/root/arfex/0001-constraints-ee-co-test/'
'--rm'
'kisp/arfe'
'/bin/bash'
'-c'
'arfe
--disable-debugger <'/tmp/tmpG6RL7DFQ.tmp' &>'/tmp/tmp523HMA4J.tmp'' returned 1


ARFE(3): 

ARFE(3): (PROGN (SETQ *TRACE-OUTPUT* SB-IMPL::*DRIBBLE-STREAM*) NIL) 
NIL
ARFE(4): 

ARFE(4): 

ARFE(4): ;;; -*- mode:text -*-

(in-readtable* arfe)

ARFE
ARFE(5): 

ARFE(5): (defun emit (list)
  (if (stringp list)
      (write-line list)
      (progn
        (dolist (x list)
	  (princ x))
	(terpri))))

EMIT
ARFE(6): 

ARFE(6): (defun latex-set (list)
  (format nil "\\{\\,~{~A~^,~}\\,\\}" list))

LATEX-SET
ARFE(7): 

ARFE(7): (defun latex-tuple (list)
  (format nil "(~{~A~^,~})" list))

LATEX-TUPLE
ARFE(8): 

ARFE(8): (defun latex-rel (list)
  (format nil "\\{\\,~{~A~^,~}\\,\\}" (mapcar 'latex-tuple list)))

LATEX-REL
ARFE(9): 

ARFE(9): (defun latex-set-set (list)
  (latex-set (mapcar 'latex-set list)))

LATEX-SET-SET
ARFE(10): 

ARFE(10): (with-open-file (*standard-output* "text.md"
				   :direction :output
				   :if-exists :supersede)
  (emit
[

# test

Ein Graph
,(defparameter *g* (convert-graph-to-abc-if-needed (from-adj '(5 . 13109284))))
mit Knoten $,(latex-set (nodes *g*)) $
und Kanten $,(latex-rel (edges *g*)) $.

Semantik | Extensionen
---------|------------
GR       | $,(latex-set-set (list-extensions *g* #'grounded-extension-p)) $
CO       | $,(latex-set-set (list-extensions *g* #'complete-extension-p)) $
ST       | $,(latex-set-set (list-extensions *g* #'stable-extension-p)) $
PR       | $,(latex-set-set (list-extensions *g* #'preferred-extension-p)) $

# Eingabe AF

Gegeben sei ein AF

$$ F = (A,R) $$

mit

$$ A = \{a_1,a_2,\dots,a_n\} $$

einer Menge von $n$ Argumenten und

$$ R \subseteq A \times A $$

einer Angriffsrelation.

## Beispiel

### alt
Gegeben ist das AF

$$ F = (A,R) $$

mit

$$ A = \{a_1,a_2,a_3\} $$

und

$$ R = \{(a_1,a_2), (a_3,a_2), (a_1,a_1)\} .$$


### neu
Gegeben ist das AF

$$ F = (A,R) $$

mit

$$ A = ,(latex-set (nodes *g*)) $$

und

$$ R = ,(latex-rel (edges *g*)) .$$


# Problem

Es soll ein CSP fuer *EE-CO* erstellt werden. Dabei soll jede
Loesung des CSP einer Extension in $Cmpl(F)$ entsprechen.

# CSP

Unser CSP soll $2n$ Variablen haben, also doppet so viele Variablen,
wie das AF Argumente hat.

Das CSP $\mathscr{P}$ ist ein Tripel

$$ \mathscr{P} = (X,D,C) $$

mit $X = \{x_1,x_2,\dots,x_{2n}\} $ einer Menge von Variablen, 
$D = (D_{x_1},D_{x_2},\dots,D_{x_{2n}}) $ einem $2n$-Tupel endlicher Domaenen und
$C$ einer Menge von Constraints. 

Die Variablen sind alle boolsche Variablen, also gilt fuer die jeweiligen Domaenen
$$ D_{x_i} = \{true, false\} \quad\text{fuer alle}\quad 1\leq i \leq 2n .$$

# Variablen des CSP

Die Variablen

$$ X  = \{x_1,x_2,\dots,x_n,x'_1,x'_2,\dots,x'_n\} = X_{\phi} \cup X_{\phi'} $$ 

des CSP setzen sich aus zwei Mengen $$X_{\phi} = \{x_1,x_2,\dots,x_n\}
$$ und $$X_{\phi'} = \{x'_1,x'_2,\dots,x'_n\} $$ zusammen.

Wir definieren zwei Bijektionen $\phi \colon A \to X_{\phi}$ und $\phi'
\colon A \to X_{\phi'}$ mit

$$ \phi(a_i) = x_i \quad \text{fuer} \quad 1 \leq i \leq  n $$

und

$$ \phi'(a_i) = x'_i \quad \text{fuer} \quad 1 \leq i \leq  n,$$

die jeweils jedem Argument in $A$ eineindeutig eine Variable in
$X_{\phi}$ bzw. $X_{\phi'}$ zuordnen. Die Variablenmengen $X_{\phi}$
bzw. $X_{\phi'}$ sind dann durch das Bild der jewiligen Abbildung gegeben:

$$ X_{\phi}  = \phi(A) = \{ \phi(a) \,|\, a \in A \} $$ 
$$ X_{\phi'}  = \phi'(A) = \{ \phi'(a) \,|\, a \in A \} $$ 


## Beispiel

In unserem Beispiel gilt

$$ X_{\phi} = \{x_1,x_2,x_3\} $$
und
$$ X_{\phi'} = \{x_1',x_2',x_3'\}$$
und daher
$$ X = \{x_1,x_2,x_3,x_1',x_2',x_3'\}.$$

]
))
; in:
;      WITH-OPEN-FILE (*STANDARD-OUTPUT* "text.md" :DIRECTION :OUTPUT :IF-EXISTS
;                  :SUPERSEDE)
;     (GRAPH:NODES ARFE::*G*)
; 
; caught WARNING:
;   undefined variable: *G*

; in: DEFPARAMETER *G*
;     (ARFE::CONVERT-GRAPH-TO-ABC-IF-NEEDED (GRAPH-ADJ:FROM-ADJ '(5 . 13109284)))
; 
; caught STYLE-WARNING:
;   undefined function: CONVERT-GRAPH-TO-ABC-IF-NEEDED
; 
; compilation unit finished
;   Undefined function:
;     CONVERT-GRAPH-TO-ABC-IF-NEEDED
;   Undefined variable:
;     *G*
;   caught 1 WARNING condition
;   caught 1 STYLE-WARNING condition
Unhandled UNDEFINED-FUNCTION in thread #<SB-THREAD:THREAD "main thread" RUNNING
                                          {1006105FE3}>:
  The function ARFE::CONVERT-GRAPH-TO-ABC-IF-NEEDED is undefined.

Backtrace for: #<SB-THREAD:THREAD "main thread" RUNNING {1006105FE3}>
0: ("undefined function")
1: ((LAMBDA ()))
2: (SB-INT:SIMPLE-EVAL-IN-LEXENV (WITH-OPEN-FILE (*STANDARD-OUTPUT* "text.md" :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE) (EMIT (LIST "

# test

Ein Graph
" (DEFPARAMETER *G* (CONVERT-GRAPH-TO-ABC-IF-NEEDED #)) "
mit Knoten $" (LATEX-SET (NODES *G*)) " $
und Kanten $" (LATEX-REL (EDGES *G*)) " $.

Semantik | Extensionen
---------|------------
GR       | $" (LATEX-SET-SET (LIST-EXTENSIONS *G* #)) " $
CO       | $" (LATEX-SET-SET (LIST-EXTENSIONS *G* #)) " $
ST       | $" ...))) #<NULL-LEXENV>)
3: (EVAL (WITH-OPEN-FILE (*STANDARD-OUTPUT* "text.md" :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE) (EMIT (LIST "

# test

Ein Graph
" (DEFPARAMETER *G* (CONVERT-GRAPH-TO-ABC-IF-NEEDED #)) "
mit Knoten $" (LATEX-SET (NODES *G*)) " $
und Kanten $" (LATEX-REL (EDGES *G*)) " $.

Semantik | Extensionen
---------|------------
GR       | $" (LATEX-SET-SET (LIST-EXTENSIONS *G* #)) " $
CO       | $" (LATEX-SET-SET (LIST-EXTENSIONS *G* #)) " $
ST       | $" ...))))
4: (SB-EXT:INTERACTIVE-EVAL (WITH-OPEN-FILE (*STANDARD-OUTPUT* "text.md" :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE) (EMIT (LIST "

# test

Ein Graph
" (DEFPARAMETER *G* (CONVERT-GRAPH-TO-ABC-IF-NEEDED #)) "
mit Knoten $" (LATEX-SET (NODES *G*)) " $
und Kanten $" (LATEX-REL (EDGES *G*)) " $.

Semantik | Extensionen
---------|------------
GR       | $" (LATEX-SET-SET (LIST-EXTENSIONS *G* #)) " $
CO       | $" (LATEX-SET-SET (LIST-EXTENSIONS *G* #)) " $
ST       | $" ...))) :EVAL NIL)
5: (SB-ACLREPL::REP-ONE)
6: (SB-ACLREPL::REPL :BREAK-LEVEL 0 :NOPRINT NIL :INSPECT NIL :CONTINUABLE NIL)
7: ((LAMBDA (SB-ACLREPL::NOPRINT) :IN SB-ACLREPL:MAKE-REPL-FUN) NIL)
8: ((LAMBDA NIL :IN SB-IMPL::TOPLEVEL-REPL))
9: (SB-IMPL::%WITH-REBOUND-IO-SYNTAX #<CLOSURE (LAMBDA NIL :IN SB-IMPL::TOPLEVEL-REPL) {100704C07B}>)
10: (SB-IMPL::TOPLEVEL-REPL NIL)
11: (SB-IMPL::TOPLEVEL-INIT)
12: ((FLET #:WITHOUT-INTERRUPTS-BODY-85 :IN SB-EXT:SAVE-LISP-AND-DIE))
13: ((LABELS SB-IMPL::RESTART-LISP :IN SB-EXT:SAVE-LISP-AND-DIE))

unhandled condition in --disable-debugger mode, quitting

